define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const fs = nodeRequire("fs");
    const regValue = /[\[]"([a-zA-Z_0-9]+)"[\]] = [(]require[(]"Net.Protol.([^]*?)"[)][)].\1/g;
    /**
     * 客户端前缀
     */
    const clientPrefix = `--Generated By prototool Do not Edit
local config = {
`;
    /**
     * 用于创建MapIDmap文件
     *
     * @export
     * @class MapIDMapTemplate
     */
    class MapIDMapTemplate {
        addToFile(file, protoname, msgIds) {
            let valueDic = new Map();
            if (!fs.existsSync(file) || !fs.statSync(file).isFile()) {
                return this.addContent(protoname + "_pb", valueDic, msgIds);
            }
            let content = fs.readFileSync(file, "utf8");
            regValue.lastIndex = 0;
            while (true) {
                let res = regValue.exec(content);
                if (res) {
                    let arr = valueDic.get(res[2]) || [];
                    arr.push(res[1]);
                    valueDic.set(res[2], arr);
                }
                else {
                    break;
                }
            }
            return this.addContent(protoname + "_pb", valueDic, msgIds);
        }
        addContent(protoname, valueDic, msgIds) {
            // let added = false;
            let code = clientPrefix;
            let arr = [];
            for (let k of valueDic.keys()) {
                if (k != protoname) {
                    let hasarr = valueDic.get(k);
                    hasarr.forEach(msg => {
                        arr.push(this.getManualCodeInfo(k, msg));
                    });
                }
            }
            msgIds.forEach(msg => {
                arr.push(this.getManualCodeInfo(protoname, msg));
            });
            arr.sort((a, b) => a > b ? 1 : -1);
            code += arr.join("\n");
            code += `\n}
    return config`;
            return code;
        }
        getManualCodeInfo(filename, messagename) {
            return `\t["${messagename}"] = (require("Net.Protol.${filename}")).${messagename},`;
        }
    }
    exports.default = MapIDMapTemplate;
});
//# sourceMappingURL=MapIDMapTemplate.js.map